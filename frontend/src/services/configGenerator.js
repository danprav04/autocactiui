// frontend/src/services/configGenerator.js
// Template for a Weathermap NODE representing a device with an icon and label.
const DEVICE_NODE_TEMPLATE = "NODE {id}\n\tLABEL {hostname}\n\tICON images/devices/{iconFilename}\n\tPOSITION {x} {y}";

// Template for a Weathermap NODE used as an invisible anchor for a LINK.
const DUMMY_NODE_TEMPLATE = "NODE {id}\n\tPOSITION {x} {y}";

// Template for a Weathermap LINK, connecting two (dummy) nodes and specifying the data source.
const LINK_TEMPLATE = "LINK {id1}-{id2}\n\tDEVICE {hostname} {ip}\n\tINTERFACE {interface}\n\tNODES {id1} {id2}";

// The complete base template for the .conf file, matching the new required format.
const CONFIG_TEMPLATE = `
# Automatically generated by AutoCacti Map Creator

BACKGROUND images/backgrounds/%name%.png
WIDTH %width%
HEIGHT %height%
TITLE %name%

KEYTEXTCOLOR 0 0 0
KEYOUTLINECOLOR 0 0 0
KEYBGCOLOR 255 255 255
TITLECOLOR 0 0 0
TIMECOLOR 0 0 0
SCALE DEFAULT 0  0   192 192 192
SCALE DEFAULT 0  1   255 255 255
SCALE DEFAULT 1  10  140 0 255
SCALE DEFAULT 10 25  32 32 255
SCALE DEFAULT 25 40  0 192 255
SCALE DEFAULT 40 55  0 240 0
SCALE DEFAULT 55 70  240 240 0
SCALE DEFAULT 70 85  255 192 0
SCALE DEFAULT 85 100 255 0 0

SET key_hidezero_DEFAULT 1

# End of global section

# TEMPLATE-only NODEs:
# TEMPLATE-only LINKs:
LINK DEFAULT
    WIDTH 3
    BWLABEL bits
    BANDWIDTH 10000M

# regular NODEs:
%nodes%

# regular LINKs:
%links%

# That's All Folks!
`;

/**
 * Generates the content for a Cacti Weathermap .conf file in the new format.
 * @param {Array} nodes - The array of nodes from React Flow.
 * @param {Array} edges - The array of edges from React Flow.
 * @param {string} mapName - The name for the map.
 * @returns {string} The full content of the .conf file.
 */
export function generateCactiConfig(nodes, edges, mapName) {
  const nodeStrings = [];
  const linkStrings = [];

  const nodeInfoMap = new Map(nodes.map(node => [node.id, node]));
  let nodeCounter = 1;

  // --- 1. Create Device NODE entries (the visible icons) ---
  for (const node of nodes) {
    const cactiNodeId = `node${String(nodeCounter++).padStart(5, '0')}`;
    
    const iconType = node.data.iconType || 'Router';
    let iconFilename;
    switch (iconType) {
        case 'Switch':
            iconFilename = 'switch-black.png';
            break;
        case 'Firewall':
            iconFilename = 'firewall.png';
            break;
        case 'Router':
        default:
            iconFilename = 'router-black.png';
            break;
    }

    // React Flow position is top-left. Node component is roughly 100x80.
    // We position the Cacti node at the visual center.
    const centerX = Math.round(node.position.x + 50);
    const centerY = Math.round(node.position.y + 40);

    nodeStrings.push(
      DEVICE_NODE_TEMPLATE.replace('{id}', cactiNodeId)
        .replace('{hostname}', node.data.hostname)
        .replace('{iconFilename}', iconFilename)
        .replace('{x}', centerX)
        .replace('{y}', centerY)
    );
  }

  // --- 2. Create LINKs and their invisible endpoint NODEs ---
  // Increased offset to ensure lines do not overlap with node labels.
  const LINK_ENDPOINT_OFFSET = 50; 

  for (const edge of edges) {
    const sourceNodeInfo = nodeInfoMap.get(edge.source);
    const targetNodeInfo = nodeInfoMap.get(edge.target);

    if (!sourceNodeInfo || !targetNodeInfo) continue;

    // Center positions of the connected devices
    const x1 = sourceNodeInfo.position.x + 50;
    const y1 = sourceNodeInfo.position.y + 40;
    const x2 = targetNodeInfo.position.x + 50;
    const y2 = targetNodeInfo.position.y + 40;

    const dx = x2 - x1;
    const dy = y2 - y1;
    const distance = Math.sqrt(dx * dx + dy * dy);

    // If nodes are at the same spot, we can't draw a link.
    if (distance === 0) continue;

    // Calculate the position for the invisible link endpoints (dummy nodes)
    const ux = dx / distance; // unit vector x
    const uy = dy / distance; // unit vector y

    const dummy1_x = Math.round(x1 + ux * LINK_ENDPOINT_OFFSET);
    const dummy1_y = Math.round(y1 + uy * LINK_ENDPOINT_OFFSET);
    const dummy2_x = Math.round(x2 - ux * LINK_ENDPOINT_OFFSET);
    const dummy2_y = Math.round(y2 - uy * LINK_ENDPOINT_OFFSET);

    const dummy1_id = `node${String(nodeCounter++).padStart(5, '0')}`;
    const dummy2_id = `node${String(nodeCounter++).padStart(5, '0')}`;

    // Add the invisible nodes to the config
    nodeStrings.push(
      DUMMY_NODE_TEMPLATE.replace('{id}', dummy1_id)
        .replace('{x}', dummy1_x)
        .replace('{y}', dummy1_y)
    );
    nodeStrings.push(
      DUMMY_NODE_TEMPLATE.replace('{id}', dummy2_id)
        .replace('{x}', dummy2_x)
        .replace('{y}', dummy2_y)
    );

    // Add the link connecting the invisible nodes
    const interfaceName = edge.data?.interface || 'unknown';
    const populatedLink = LINK_TEMPLATE
      .replace(/{id1}/g, dummy1_id)
      .replace(/{id2}/g, dummy2_id)
      .replace('{hostname}', sourceNodeInfo.data.hostname)
      .replace('{ip}', sourceNodeInfo.data.ip)
      .replace('{interface}', interfaceName);

    linkStrings.push(populatedLink);
  }
  
  // Calculate map dimensions based on node positions
  const allX = nodes.map(n => n.position.x);
  const allY = nodes.map(n => n.position.y);
  const mapWidth = nodes.length > 0 ? Math.round(Math.max(...allX) + 150) : 800;
  const mapHeight = nodes.length > 0 ? Math.round(Math.max(...allY) + 150) : 600;

  // Populate the final configuration template
  let finalConfig = CONFIG_TEMPLATE;
  finalConfig = finalConfig.replace(/%name%/g, mapName);
  finalConfig = finalConfig.replace('%width%', mapWidth);
  finalConfig = finalConfig.replace('%height%', mapHeight);
  finalConfig = finalConfig.replace('%nodes%', nodeStrings.join('\n\n'));
  finalConfig = finalConfig.replace('%links%', linkStrings.join('\n\n'));

  return finalConfig.trim();
}