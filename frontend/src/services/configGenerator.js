// frontend/src/services/configGenerator.js
import { NODE_WIDTH, NODE_HEIGHT } from '../config/constants';

/**
 * A fixed horizontal offset (in pixels) to apply to all generated coordinates
 * after scaling. A positive value shifts the entire map to the right on the final PNG.
 */
const CONFIG_X_OFFSET = 56;

/**
 * A fixed vertical offset (in pixels) to apply to all generated coordinates
 * after scaling. A positive value shifts the entire map down on the final PNG.
 */
const CONFIG_Y_OFFSET = 56;

/**
 * A scaling factor to apply to all generated coordinates.
 * 1 = no scaling, 2 = double size, 0.5 = half size.
 * This is applied before the fixed offset.
 */
const CONFIG_SCALE_FACTOR = .8;


// Template for a Weathermap NODE used as an invisible anchor for a LINK.
const DUMMY_NODE_TEMPLATE = "NODE {id}\n\tPOSITION {x} {y}";

// Template for a Weathermap LINK, connecting two (dummy) nodes and specifying the data source.
const LINK_TEMPLATE = "LINK {id1}-{id2}\n\tDEVICE {hostname} {ip}\n\tINTERFACE {interface}\n\tNODES {id1} {id2}";

// The complete base template for the .conf file.
const CONFIG_TEMPLATE = `
# Automatically generated by AutoCacti Map Creator

BACKGROUND images/backgrounds/%name%.png
WIDTH %width%
HEIGHT %height%
TITLE %name%

KEYTEXTCOLOR 0 0 0
KEYOUTLINECOLOR 0 0 0
KEYBGCOLOR 255 255 255
TITLECOLOR 0 0 0
TIMECOLOR 0 0 0
SCALE DEFAULT 0  0   192 192 192
SCALE DEFAULT 0  1   255 255 255
SCALE DEFAULT 1  10  140 0 255
SCALE DEFAULT 10 25  32 32 255
SCALE DEFAULT 25 40  0 192 255
SCALE DEFAULT 40 55  0 240 0
SCALE DEFAULT 55 70  240 240 0
SCALE DEFAULT 70 85  255 192 0
SCALE DEFAULT 85 100 255 0 0

SET key_hidezero_DEFAULT 1

# End of global section

# TEMPLATE-only NODEs:
# TEMPLATE-only LINKs:
LINK DEFAULT
    WIDTH 3
    BWLABEL bits
    BANDWIDTH 10000M

# regular NODEs:
%nodes%

# regular LINKs:
%links%

# That's All Folks!
`;

/**
 * Generates the content for a Cacti Weathermap .conf file.
 * @param {object} params - The parameters for config generation.
 * @returns {string} The full content of the .conf file.
 */
export function generateCactiConfig({ nodes, edges, mapName, mapWidth, mapHeight }) {
  const deviceNodes = nodes.filter(node => node.type !== 'group');
  const nodeStrings = [];
  const linkStrings = [];

  const nodeInfoMap = new Map(deviceNodes.map(node => [node.id, node]));
  let nodeCounter = 1;

  // An offset to ensure link endpoints land safely inside the node's visual boundary.
  const LINK_ENDPOINT_OFFSET = 70; 

  // Iterate through the edges to create links and their required invisible nodes.
  for (const edge of edges) {
    const sourceNodeInfo = nodeInfoMap.get(edge.source);
    const targetNodeInfo = nodeInfoMap.get(edge.target);

    if (!sourceNodeInfo || !targetNodeInfo) continue;
    
    // The link's vector should be based on the geometric center of the node component.
    const sourceCenterX = sourceNodeInfo.position.x + (NODE_WIDTH / 2);
    const sourceCenterY = sourceNodeInfo.position.y + (NODE_HEIGHT / 2);
    const targetCenterX = targetNodeInfo.position.x + (NODE_WIDTH / 2);
    const targetCenterY = targetNodeInfo.position.y + (NODE_HEIGHT / 2);

    const dx = targetCenterX - sourceCenterX;
    const dy = targetCenterY - sourceCenterY;
    const distance = Math.sqrt(dx * dx + dy * dy);

    if (distance === 0) continue;

    // Create a unit vector to find the point along the line for the offset.
    const ux = dx / distance;
    const uy = dy / distance;

    // Calculate the absolute positions for the invisible dummy nodes.
    const dummy1_x = Math.round((sourceCenterX + ux * LINK_ENDPOINT_OFFSET) * CONFIG_SCALE_FACTOR) + CONFIG_X_OFFSET;
    const dummy1_y = Math.round((sourceCenterY + uy * LINK_ENDPOINT_OFFSET) * CONFIG_SCALE_FACTOR) + CONFIG_Y_OFFSET;
    const dummy2_x = Math.round((targetCenterX - ux * LINK_ENDPOINT_OFFSET) * CONFIG_SCALE_FACTOR) + CONFIG_X_OFFSET;
    const dummy2_y = Math.round((targetCenterY - uy * LINK_ENDPOINT_OFFSET) * CONFIG_SCALE_FACTOR) + CONFIG_Y_OFFSET;

    const dummy1_id = `node${String(nodeCounter++).padStart(5, '0')}`;
    const dummy2_id = `node${String(nodeCounter++).padStart(5, '0')}`;

    // Add the invisible nodes required for the link to the node string list.
    nodeStrings.push(DUMMY_NODE_TEMPLATE.replace('{id}', dummy1_id).replace('{x}', dummy1_x).replace('{y}', dummy1_y));
    nodeStrings.push(DUMMY_NODE_TEMPLATE.replace('{id}', dummy2_id).replace('{x}', dummy2_x).replace('{y}', dummy2_y));
    
    // Create the link definition that connects the two dummy nodes.
    const interfaceName = edge.data?.interface || 'unknown';
    const populatedLink = LINK_TEMPLATE
      .replace(/{id1}/g, dummy1_id)
      .replace(/{id2}/g, dummy2_id)
      .replace('{hostname}', sourceNodeInfo.data.hostname)
      .replace('{ip}', sourceNodeInfo.data.ip)
      .replace('{interface}', interfaceName);

    linkStrings.push(populatedLink);
  }
  
  // Assemble the final configuration string.
  let finalConfig = CONFIG_TEMPLATE;
  finalConfig = finalConfig.replace(/%name%/g, mapName);
  finalConfig = finalConfig.replace('%width%', mapWidth);
  finalConfig = finalConfig.replace('%height%', mapHeight);
  finalConfig = finalConfig.replace('%nodes%', nodeStrings.join('\n\n'));
  finalConfig = finalConfig.replace('%links%', linkStrings.join('\n\n'));

  return finalConfig.trim();
}