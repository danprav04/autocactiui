// This logic is ported from the original Python codebase to generate a
// Cacti Weathermap-compatible configuration file.

// Template for a Weathermap NODE
const NODE_TEMPLATE = "NODE {id}\n\tLABEL {label}\n\tICON {icon}\n\tPOSITION {x} {y}";

// Template for a Weathermap LINK
const LINK_TEMPLATE = "LINK {id1}-{id2}\n\tNODES {id1} {id2}";

// The base template for the .conf file
// Placeholders %name%, %width%, %height%, %nodes%, and %links% will be replaced.
const CONFIG_TEMPLATE = `
# Automatically generated by AutoCacti UI

WIDTH %width%
HEIGHT %height%
HTMLSTYLE overlib

FONTDEFINE 100 8 Arial
TITLE %name%

%nodes%

%links%
`;

/**
 * Generates the content for a Cacti Weathermap .conf file.
 * @param {Array} nodes - The array of nodes from React Flow.
 * @param {Array} edges - The array of edges from React Flow.
 * @param {string} mapName - The name for the map.
 * @returns {string} The full content of the .conf file.
 */
export function generateCactiConfig(nodes, edges, mapName) {
  let nodeCounter = 1;
  const nodeStrings = [];
  const linkStrings = [];

  // Create a mapping from node IP (ID) to the node object for quick lookups.
  const nodeMap = new Map(nodes.map(node => [node.id, node]));

  // For every edge in our map, we create two Cacti NODEs and one LINK.
  for (const edge of edges) {
    const sourceNode = nodeMap.get(edge.source);
    const targetNode = nodeMap.get(edge.target);

    if (!sourceNode || !targetNode) {
      continue; // Skip if for some reason a node is missing
    }

    const id1 = nodeCounter;
    const id2 = nodeCounter + 1;

    // Create the first Cacti NODE from our source device
    // NOTE: The original Python code did not populate LABEL or ICON, so we replicate that.
    // A real implementation might use `sourceNode.data.hostname` for the label.
    nodeStrings.push(
      NODE_TEMPLATE.replace('{id}', id1)
        .replace('{label}', '') // Intentionally blank per original logic
        .replace('{icon}', '')   // Intentionally blank per original logic
        .replace('{x}', Math.round(sourceNode.position.x))
        .replace('{y}', Math.round(sourceNode.position.y))
    );

    // Create the second Cacti NODE from our target device
    nodeStrings.push(
      NODE_TEMPLATE.replace('{id}', id2)
        .replace('{label}', '')
        .replace('{icon}', '')
        .replace('{x}', Math.round(targetNode.position.x))
        .replace('{y}', Math.round(targetNode.position.y))
    );

    // Create the LINK connecting the two new Cacti NODEs
    linkStrings.push(
      LINK_TEMPLATE.replace('{id1}', id1).replace('{id2}', id2)
    );

    nodeCounter += 2;
  }
  
  // Find the overall dimensions of the map to set Width and Height
  const allX = nodes.map(n => n.position.x);
  const allY = nodes.map(n => n.position.y);
  const mapWidth = Math.round(Math.max(...allX) + 150); // Add padding
  const mapHeight = Math.round(Math.max(...allY) + 150); // Add padding


  // Assemble the final config file from the template
  let finalConfig = CONFIG_TEMPLATE;
  finalConfig = finalConfig.replace('%name%', mapName);
  finalConfig = finalConfig.replace('%width%', mapWidth);
  finalConfig = finalConfig.replace('%height%', mapHeight);
  finalConfig = finalConfig.replace('%nodes%', nodeStrings.join('\n\n'));
  finalConfig = finalConfig.replace('%links%', linkStrings.join('\n\n'));

  return finalConfig.trim();
}